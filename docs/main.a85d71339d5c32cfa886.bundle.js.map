{"version":3,"file":"main.a85d71339d5c32cfa886.bundle.js","sources":["webpack:///./src/utils/storybook.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeDecorator } from '@storybook/addons';\nimport { action as a,  } from '@storybook/addon-actions';\n\n// // prevent the entire stringified function from showing up in the JSX storyboard panel\nexport const action = (...args) => {\n\tconst fn = a(...args);\n\tfn.toString = () => '[[ Function ]]';\n\treturn fn;\n}\n\n\n// children, title, defaultProps, propTypes, defaultState \nexport const SwitchBoard = ({ children, component, defaultState }) => {\n\tconst [state, setState] = useState({});\n\tconst [loaded, setLoaded] = useState(false);\n\tconst propTypes = useRef([])\n\tconst componentName = useRef(null);\n\n\tuseEffect(() => {\n\t\t\n\t\tcomponentName.current = component.displayName || component.name;\n\t\tconst PropTypesMap = new Map();\n\n\t\tfor (let _type in PropTypes) {\n\t\t\tPropTypesMap.set(PropTypes[_type], _type);\n\t\t}\t\t\n\t\t// only supporting these proptypes for now\n\t\tconst supportedTypes = ['bool', 'number', 'string']; \n\t\tconst initialState = {};\n\n\t\tfor (let propName in component.propTypes) {\n\n\t\t\tconst type = PropTypesMap.get(component.propTypes[propName]);\n\n\t\t\tif (supportedTypes.includes(type)) {\n\n\t\t\t\tpropTypes.current.push({\n\t\t\t\t\tname: propName,\n\t\t\t\t\ttype: type\n\t\t\t\t});\n\n\t\t\t\tif (defaultState.hasOwnProperty(propName)) {\n\t\t\t\t\tinitialState[propName] = component.defaultState[propName];\n\t\t\t\t} else if (component.defaultProps && component.defaultProps.hasOwnProperty(propName)) {\n\t\t\t\t\tinitialState[propName] = component.defaultProps[propName];\n\t\t\t\t}\telse if (type === 'string') {\n\t\t\t\t\tinitialState[propName] = '';\n\t\t\t\t}\telse if (type === 'bool') {\n\t\t\t\t\tinitialState[propName] = false;\n\t\t\t\t}\telse {\n\t\t\t\t\tinitialState[propName] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsetState(initialState);\n\t\tsetLoaded(true);\n\t},[]);\n\n\tif (!loaded) return null;\n\n\treturn (\n\t\t<div>\n\t\t\t<nav style={{padding: 5, backgroundColor: 'lightgrey', margin: 0 }}>\n\t\t\t\t<h3>{componentName.current}</h3>\n\t\t\t</nav>\n\t\t\t<section style={{ padding: 10, display: 'flex', justifyContent: 'space-around' }}>\n\t\t\t\t{\n\t\t\t\t\tchildren(state)\n\t\t\t\t}\n\t\t\t</section>\n\t\t\t<section style={{ display: 'flex', justifyContent: 'space-around' }}>\n\t\t\t\t<table style={{border: '1px solid black'}}>\n\t\t\t\t\t<caption>Experiment with prop combos</caption>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpropTypes.current.map(({ name, type, defaultValue}) => \n\t\t\t\t\t\t\t\t<tr key={name}>\n\t\t\t\t\t\t\t\t\t<th scope=\"row\" style={{border: '1px solid black'}}>{ name }</th>\n\t\t\t\t\t\t\t\t\t<td style={{border: '1px solid black'}}>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttype === 'bool' ?\n\t\t\t\t\t\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={state[name] ? 'true' : 'false'}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setState({ ...state, [name]: !state[name] })}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t\t\t\t\t\ttype={type === 'string' ? 'text' : 'number'}\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={state[name]}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={evt => setState({ ...state, [name]: evt.target.value })}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</section>\t\t\t\t\n\t\t</div>\n\t)\n}\n\nSwitchBoard.defaultProps = {\n\tdefaultState: {}\n}"],"mappings":"AAMA","sourceRoot":""}