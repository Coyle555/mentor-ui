{"version":3,"file":"main.b38ddf347fea8253d35b.bundle.js","sources":["webpack:///./src/components/mentor-inputs/src/components/select-input/selectInput.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { useInputState } from '../../hooks/index';\nimport '../../styles/index.less';\n\nconst SelectInput = ({ \n\tvalidation, \n\toptions, \n\tplaceholder,\n\tgetOptionLabel,\n\tgetOptionValue,\n\tparse, \n\t...props \n}) => {\n\tconst parseValue = useMemo(() => {\n\t\treturn function(value) {\n\t\t\tif (typeof parse === 'function') {\n\t\t\t\treturn parse(value);\n\t\t\t} else if (value && typeof value === 'object') {\n\t\t\t\treturn getOptionValue(value);\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t}, []);\n\n\tconst inputState = useInputState({ \n\t\tvalidate: validation, \n\t\tparse: parseValue, \n\t\t...props \n\t});\t\n\n\tconst formattedOptions = useMemo(() => {\n\t\tconst isGetLabelFn = typeof getOptionLabel === 'function';\n\t\tconst isGetValueFn = typeof getOptionValue === 'function';\n\n\t\treturn options.map((option, i) => {\n\t\t\tlet label, val = option;\n\t\t\t\n\t\t\tif (isGetLabelFn) {\n\t\t\t\t/// prevent potential crash cause by react trying to render JSON in the html\n\t\t\t\t// this probably wont look pretty but its better than the alternative\n\t\t\t\tlabel = String(getOptionLabel(option));\n\t\t\t} else {\n\t\t\t\tlabel = typeof option === 'string' ? option : String(option);\n\t\t\t}\n\n\t\t\tif (isGetLabelFn) {\n\t\t\t\tval = getOptionValue(option);\n\t\t\t}\n\t\t\t\n\t\t\treturn (\n\t\t\t\t<option\n\t\t\t\t\tkey={i + label}\n\t\t\t\t\tvalue={val}\n\t\t\t\t>\n\t\t\t\t\t{ label }\n\t\t\t\t</option>\t\n\t\t\t)\n\t\t});\n\t}, [ options ]);\n\n\tconst inputClasses = classNames({\t\n\t\t'apm-mi-form-control': true,\n\t\t[props.className]: !!props.className,\n\t});\n\n\n\treturn (\n\t\t<select\n\t\t\t{...props}\n\t\t\tclassName={inputClasses}\n\t\t\t{...inputState}\n\t\t\tname={props.name}\n\t\t>\n\t\t\t<option\n\t\t\t\tdisabled={props.required}\n\t\t\t\tvalue=\"\" \n\t\t\t>\n\t\t\t\t{ placeholder }\n\t\t\t</option>\n\t\t\t{ formattedOptions }\n\t\t</select>\n\t);\n}\n\nSelectInput.propTypes = {\n\tgetOptionLabel: PropTypes.func,\n\tgetOptionValue: PropTypes.func,\n\toptions: PropTypes.array,\n\tparse: PropTypes.func,\n\tvalidation: PropTypes.func,\n};\n\nSelectInput.defaultProps = {\n\t// getOptionLabel: (val) => { return val },\n\t// getOptionValue: (val) => { return val },\n\toptions: []\n};\n\nexport default SelectInput;\n"],"mappings":"AAOA","sourceRoot":""}